<?php
/**
 * Pedidos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Pedidos extends BasePedidos
{
	//$parametro recibe el id del cliente al cual se le añadirá el pedido y los dias de credito.
	public function procPedSesion($metodo_pago=null){
		$pedido = new Pedidos;
		try {
			if(isset($_SESSION['cliente'])){
				$sujeto = $_SESSION['cliente'];
			}
			if(isset($_SESSION['vendedor'])){
				$sujeto = $_SESSION['vendedor'];
				$sujeto->id = $sujeto->cliente;
			}
			$cliente = $pedido->infoCliente($sujeto->id);
			if($metodo_pago==null or $metodo_pago=='null'){
				$metodo_pago = 0;
			}
			$parametros = array(
				'forma_pago' => (int)$metodo_pago,
				'tipo_pago' => (int)$cliente['credito'],
				'id_cliente' => (int)$cliente['id'],
				'inactivo' => (int)$cliente['inactivo'],
			);
   			if(!isset($sujeto->articulos)){
				return 'no hay articulos para crear pedido';
			}
			if(isset($sujeto->pedido)){
				return 'pedido ya existente';
			}
   			if(isset($sujeto->articulos) and !isset($sujeto->pedido)){
	   			$datos = $sujeto->articulos;
				$sujeto->pedido = $pedido->newPedido($cliente);
				if(count($datos)>=1){
					foreach($datos as $key => $value){
						$qArticulo = Doctrine::getTable('articulos')->findOneById($key);
						$articulos = new ArticulosPedido;
						$articulos->id_articulo = (int)$key;
						$articulos->cantidad = (int)$value;
						$articulos->descripcion = $qArticulo->nombre;
						$articulos->codigo = $qArticulo->codigo;
						$articulos->id_pedido = (int)$sujeto->pedido;
						$articulos->inactivo = 0;
						$temp = Doctrine_Query::create()
								-> select('*')
								-> from('precioArt')
								-> where('id_art = ?',(int)$key)
								-> andWhere('id_tipo_cliente = ?',$sujeto->id_tipo)
								-> andWhere('inactivo = 0');
						$temp = $temp -> execute() -> toArray();
						$qPrecio = Doctrine_Query::create()
								-> select('*')
								-> from('precios')
								-> where('id = ?',$temp[0]['id_precio'])
								-> andWhere('inactivo = 0');
						$qPrecio = $qPrecio-> execute() -> toArray();
						$articulos->precio = (float)$qPrecio[0]['precio'];
						$temp = Doctrine_Query::create()
								-> select('*')
								-> from('fotosArt')
								-> where('id_art = ?',(int)$key)
								-> andWhere('inactivo = 0');
						$temp = $temp->execute()->toArray();
						$qFoto = Doctrine::getTable('fotos')->findOnebyId($temp[0]['id_foto']);
						$articulos->foto = $qFoto->direccion.'thumbs/'.$qFoto->descripcion.'.jpg';
						$articulos->save();
						unset($articulos);
					}
					$sujeto->status = 'procesado';
					return 'TRUE';
				}
   			}
   		}
		catch (Exception $e){
			return 'Message: ' .$e->getMessage();
		}
		
   }

	
	//Funcion para procesar el ingreso de items a un pedido.
	
	public function newPedido($data)
	{
		$newPedido = new Pedidos;
		$today = time() - 18720; 
		$mysqldate = date('Y-m-d h:i:s',$today);
		try 
		{
			$newPedido->fecha_creacion = $mysqldate;
			$newPedido->fecha_ult_mod = $mysqldate;
		//Si el tipo de pago es superior o igual a 0 dias, lo procesa, sino usa el default 0.
			if (isset($data['credito']) and ($data['credito'] >= 0))
			{
				$newPedido->tipo_pago = (int)$data['credito'];
			}else
			{
				return 'Campo credito invalido';
			}
		//Si el id de cliente no existe, retorna error, sino lo procesa.
			if (isset($data['id']) and ($data['id'] >= 0))
			{
				$newPedido->id_cliente = (int)$data['id'];
			}else
			{
				return 'Campo id_cliente invalido';
			}
			/*if (($data['id'] == null) or ($data['id'] == 'undefined'))
			{
				return 'cliente invalido';
			}else
			{
				$newPedido->id_cliente = (int)$data['id'];	
			}*/
		//Si la forma de pago no existe, usa el default, 0 = efectivo, 1 = cheque, 2 = transferencia.
			$newPedido->forma_pago = 0; 
			$newPedido->inactivo = (int)$data['inactivo'];
			$newPedido->estado = 0;
			$newPedido->fact_nro = 0;
			$newPedido->monto = 0;
			$newPedido->save();
			return $newPedido->id;
		}
		catch (Exception $e)
		{
			return 'Message: ' .$e->getMessage();
		}
		
	}
	public function infoCliente($data){
		$qCliente = Doctrine_Query::create()
				-> select('*')
				-> from('cliente')
				-> where('id = ?',(int)$data);
		$query = $qCliente->execute()->toArray();
		return $query[0];
	}


	//Funcion para modificar los campos de la tabla articulos_Pedidos. Argumentos del array:
	//id_articulo = id unico del pedido en la base de datos,
	//campo = nombre del campo como esta definido en la tabla, 
	//valor = valor a ingresar para sustituir en la base de datos.
	public function modArticulos($data){
		$query = Doctrine_Core::getTable('articulosPedido')->findOnebyId($data['id_articulo']);
		switch($data['campo']){
			case 'id_pedido':
				$query->id_pedido = $data['valor'];
			break;
			case 'id_articulo':
				$query->id_articulo = $data['valor'];
			break;
			case 'cantidad':
				$query->cantidad = $data['valor'];
			break;
			case 'inactivo':
				$query->inactivo = $data['valor'];
			break;
		}
		try {
			$query->save();
			echo 'true';
			return 'void';
		} catch (Exception $e){
			return 'error';
		}
	}
	
	
	//Funcion para modificar los campos de la tabla Pedidos. Argumentos del array:
	//id_pedido = id unico del pedido en la base de datos,
	//campo= nombre del campo como esta definido en la tabla, 
	//valor = valor a ingresar para sustituir en la base de datos.
	public function modPedidos($data){
		$pedido = Doctrine::getTable('pedidos')->findOnebyId($data['id_pedido']);
		$today = time() - 18720; 
		$mysqldate = date('Y-m-d h:i:s',$today);
		switch($data['campo'])
		{
			case 'estado':
				$pedido->estado = $data['valor'];
				$pedido->fecha_ult_mod = $mysqldate; 
				break;
			case 'tipo_pago':
				$pedido->tipo_pago = $data['valor'];
				$pedido->fecha_ult_mod = $mysqldate; 
				break;
			case 'forma_pago':
				$pedido->forma_pago = $data['valor'];
				$pedido->fecha_ult_mod = $mysqldate; 
				break;
			case 'id_cliente':
				$pedido->id_cliente = $data['valor'];
				$pedido->fecha_ult_mod = $mysqldate; 
				break;
			default:
				$pedido->fecha_ult_mod = $mysqldate; 
				break;
		}
		try {
			$pedido->save();
			echo 'true';
			return 'void';
		} catch (Exception $e){
			return 'error';
		}
	}
	
}